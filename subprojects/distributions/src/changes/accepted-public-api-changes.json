{
    "acceptedApiChanges": [
        {
            "type": "org.gradle.api.tasks.compile.JavaCompile",
            "member": "Method org.gradle.api.tasks.compile.JavaCompile.getCacheRepository()",
            "acceptation": "Internal dependency injection method",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.compile.JavaCompile",
            "member": "Method org.gradle.api.tasks.compile.JavaCompile.getCachingFileHasher()",
            "acceptation": "Internal dependency injection method",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.compile.JavaCompile",
            "member": "Method org.gradle.api.tasks.compile.JavaCompile.getFileOperations()",
            "acceptation": "Internal dependency injection method",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.compile.JavaCompile",
            "member": "Method org.gradle.api.tasks.compile.JavaCompile.getGeneralCompileCaches()",
            "acceptation": "Internal dependency injection method",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.compile.JavaCompile",
            "member": "Method org.gradle.api.tasks.compile.JavaCompile.getStreamHasher()",
            "acceptation": "Internal dependency injection method",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.compile.JavaCompile",
            "member": "Method org.gradle.api.tasks.compile.JavaCompile.getIncrementalCompilerFactory()",
            "acceptation": "Internal dependency injection method"
        },
        {
            "type": "org.gradle.language.java.tasks.PlatformJavaCompile",
            "member": "Class org.gradle.language.java.tasks.PlatformJavaCompile",
            "acceptation": "Internal dependency injection method",
            "changes": [
                "org.gradle.api.tasks.compile.JavaCompile.getCacheRepository()",
                "org.gradle.api.tasks.compile.JavaCompile.getCachingFileHasher()",
                "org.gradle.api.tasks.compile.JavaCompile.getFileOperations()",
                "org.gradle.api.tasks.compile.JavaCompile.getGeneralCompileCaches()",
                "org.gradle.api.tasks.compile.JavaCompile.getStreamHasher()"
            ]
        },
        {
            "type": "org.gradle.nativeplatform.tasks.LinkSharedLibrary",
            "member": "Class org.gradle.nativeplatform.tasks.LinkSharedLibrary",
            "acceptation": "Made idiomatic for the Provider API",
            "changes": [
                "org.gradle.nativeplatform.tasks.AbstractLinkTask.setOutputFile(java.io.File)",
                "org.gradle.nativeplatform.tasks.AbstractLinkTask.setOutputFile(org.gradle.api.provider.Provider)",
                "org.gradle.nativeplatform.tasks.AbstractLinkTask.setTargetPlatform(org.gradle.nativeplatform.platform.NativePlatform)",
                "org.gradle.nativeplatform.tasks.AbstractLinkTask.setToolChain(org.gradle.nativeplatform.toolchain.NativeToolChain)"
            ]
        },
        {
            "type": "org.gradle.nativeplatform.tasks.LinkMachOBundle",
            "member": "Class org.gradle.nativeplatform.tasks.LinkMachOBundle",
            "acceptation": "Made idiomatic for the Provider API",
            "changes": [
                "org.gradle.nativeplatform.tasks.AbstractLinkTask.setOutputFile(java.io.File)",
                "org.gradle.nativeplatform.tasks.AbstractLinkTask.setOutputFile(org.gradle.api.provider.Provider)",
                "org.gradle.nativeplatform.tasks.AbstractLinkTask.setTargetPlatform(org.gradle.nativeplatform.platform.NativePlatform)",
                "org.gradle.nativeplatform.tasks.AbstractLinkTask.setToolChain(org.gradle.nativeplatform.toolchain.NativeToolChain)"
            ]
        },
        {
            "type": "org.gradle.nativeplatform.tasks.LinkExecutable",
            "member": "Class org.gradle.nativeplatform.tasks.LinkExecutable",
            "acceptation": "Made idiomatic for the Provider API",
            "changes": [
                "org.gradle.nativeplatform.tasks.AbstractLinkTask.setOutputFile(java.io.File)",
                "org.gradle.nativeplatform.tasks.AbstractLinkTask.setOutputFile(org.gradle.api.provider.Provider)",
                "org.gradle.nativeplatform.tasks.AbstractLinkTask.setTargetPlatform(org.gradle.nativeplatform.platform.NativePlatform)",
                "org.gradle.nativeplatform.tasks.AbstractLinkTask.setToolChain(org.gradle.nativeplatform.toolchain.NativeToolChain)"
            ]
        },
        {
            "type": "org.gradle.language.nativeplatform.tasks.AbstractNativePCHCompileTask",
            "member": "Class org.gradle.language.nativeplatform.tasks.AbstractNativePCHCompileTask",
            "acceptation": "Made idiomatic for the Provider API",
            "changes": [
                "org.gradle.language.nativeplatform.tasks.AbstractNativeCompileTask.setTargetPlatform(org.gradle.nativeplatform.platform.NativePlatform)",
                "org.gradle.language.nativeplatform.tasks.AbstractNativeCompileTask.setToolChain(org.gradle.nativeplatform.toolchain.NativeToolChain)"
            ]
        },
        {
            "type": "org.gradle.language.nativeplatform.tasks.AbstractNativeSourceCompileTask",
            "member": "Class org.gradle.language.nativeplatform.tasks.AbstractNativeSourceCompileTask",
            "acceptation": "Made idiomatic for the Provider API",
            "changes": [
                "org.gradle.language.nativeplatform.tasks.AbstractNativeCompileTask.setTargetPlatform(org.gradle.nativeplatform.platform.NativePlatform)",
                "org.gradle.language.nativeplatform.tasks.AbstractNativeCompileTask.setToolChain(org.gradle.nativeplatform.toolchain.NativeToolChain)"
            ]
        }
    ]
}
